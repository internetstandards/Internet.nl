name: Internet.nl Docker

on:
  pull_request:
  push:
    branches:
      - main
      - release/*

jobs:
  build-test-check:
    runs-on: ubuntu-22.04

    outputs:
      internetnl_version: ${{ steps.get_version.outputs.internetnl_version }}

    steps:
      - uses: actions/checkout@v3
        # include vendor/ submodules used to build dependencies like nassl and unbound
        with:
          submodules: recursive

      - name: Unshallow repository for version tag
        run: |
          # https://github.com/pypa/setuptools_scm/issues/414
          git fetch --prune --unshallow
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Generate version number
        id: get_version
        run: |
          pip -q install setuptools_scm
          # export RELEASE version for subsequent steps
          # '+' is not supported in Docker Image tags
          echo "RELEASE=$(python -m setuptools_scm | tr '+' '-')" | tee -a "$GITHUB_ENV"

      - name: Enable ip6tables in Docker
        run: |
          sudo bash -c 'echo "{ \"ip6tables\": true, \"experimental\":true}" > /etc/docker/daemon.json'
          sudo systemctl restart docker.service
          sudo ip6tables -I DOCKER-USER --dst ff00::/8 -j ACCEPT

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build images
        run: make build

      - name: Pull remaining docker images
        # build env includes all images
        run: make pull env=build pull_args=--ignore-buildable

      ### Integration tests
      - name: Start test instance
        run: make up env=test

      - name: Run integration tests
        run: make integration-tests-verbose env=test

      - name: Check nginx config
        # this check requires a running/configured webserver container
        run: make check-gixy

      - name: Collect Docker Compose logs
        if: always()
        run: make logs-all-dump env=test > docker-compose.log

      - name: Failure log
        if: failure()
        # log last few lines in case of failure for quick debugging
        run: make docker-compose args="logs --tail=100" env=test

      - name: Stop test instance
        run: make down env=test

      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Playwright integration test results (screenshots, video)
          path: test-results/
          if-no-files-found: ignore

      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Integration test Docker Compose Logs
          path: docker-compose.log
          if-no-files-found: ignore

      # Unit tests
      - name: Run test
        run: make test

      ### Test development environment
      - name: Start development environment
        run: make up env=develop

      - name: Run development environment tests
        run: make develop-tests

      - name: Collect Docker Compose logs
        if: always()
        run: make logs-all-dump env=develop > docker-compose.log

      - name: Failure log
        if: failure()
        # log last few lines in case of failure for quick debugging
        run: make docker-compose args="logs --tail=100" env=develop

      - name: Stop development environment
        run: make down env=develop

      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Playwright development environment test results (screenshots, video)
          path: test-results/
          if-no-files-found: ignore

      - name: Archive test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: Development environment test Docker Compose Logs
          path: docker-compose.log
          if-no-files-found: ignore

      ### Linting
      - name: Run check
        run: /bin/bash -o pipefail -c 'make --silent check | tee -a $GITHUB_STEP_SUMMARY'

      - name: Run lint
        run: /bin/bash -o pipefail -c 'make --silent lint | tee -a $GITHUB_STEP_SUMMARY'

      ### Summary
      - uses: test-summary/action@v2.1
        with:
          paths: "*test-results.xml"
        if: always()
        continue-on-error: true

      ### Push images
      - name: Publish images
        run: make push env=build

      - name: Create branch tag for images
        run: |
          branch_name="${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || github.ref_name}}"
          for image in $(docker image ls --format "{{.Repository}}:{{.Tag}}" ghcr.io/internetstandards/\*:$RELEASE);do
            docker buildx imagetools create "$image" --tag "${image/$RELEASE/$branch_name}"
          done

      - name: Create latest tag for images
        if: github.event_name == 'release'
        run: |
          for image in $(docker image ls --format "{{.Repository}}:{{.Tag}}" ghcr.io/internetstandards/\*:$RELEASE);do
            docker buildx imagetools create "$image" --tag "${image/$RELEASE/latest}"
          done
