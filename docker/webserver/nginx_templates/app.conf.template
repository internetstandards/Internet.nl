server_names_hash_bucket_size 1024;

# override default log format to include vhost
log_format default '$remote_addr $host $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" $http3';

access_log /var/log/nginx/access.log default;

# create seperate logfile, since the access.log file is a symlink to stdout
# it cannot be used by prometheus-nginxlog-exporter
log_format nginx_logs_exporter '$remote_addr $host $remote_user [$time_local] $proxy_host "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" $http3';
access_log /var/log/nginx/prometheus-nginxlog-exporter/access.log nginx_logs_exporter;

# disable version in server banner
server_tokens off;
# requires openresty
# more_set_headers 'Server: intentionally-undisclosed-internetnl-139sj2W9kB8';

# caching settings
proxy_cache_path  /var/tmp/nginx_cache  levels=1:2  keys_zone=default_cache:10m inactive=24h  max_size=1g;

include http.headers;

# resolve proxy_pass hostnames using Docker resolver, use only IPv4 for simplicity
# cache is set to 5s, this reduces the amount of DNS queries
# ideally we would not cache at all as any time a container (eg: app) is restarted it's
# IP address might change causing proxy requests to fail
resolver 127.0.0.11 ipv6=off valid=5s;

root /var/www/internet.nl;

# enable OSCP stapling
ssl_stapling on;
ssl_stapling_verify on;
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305;

http2 on;
http3 on;
quic_gso on;
quic_host_key /etc/nginx/quic_host.key;
quic_retry on;

# default server for http, primary used for ACME and https redirect
server {
    listen       80;
    listen  [::]:80;

    # LANGUAGES_REGEX is a list of language prefixes separated by pipes, eg: `nl\.|en\.`
    server_name ~^((${LANGUAGES_REGEX})?(ipv6\.)?|www\.)${INTERNETNL_DOMAINNAME_REGEX}$ ${REDIRECT_DOMAINS_LIST};

    # letsencrypt/ACME
    location /.well-known/acme-challenge/ {
        # basic auth should not apply to this path
        auth_basic off;
        # IP allowlist should also not apply
        allow all;
    }

    # redirect everything to https
    location / {
        return 301 https://$host$request_uri;
    }
}

# http server for connection test, does not redirect to https
server {
    listen       80;
    listen  [::]:80;

    # LANGUAGES_REGEX is a list of language prefixes separated by pipes, eg: `nl\.|en\.`
    server_name ~^(?<lang>${LANGUAGES_REGEX})?conn\.(?<ipv6>ipv6\.)?${INTERNETNL_DOMAINNAME_REGEX}$;

    # pass specific connection test paths to backend
    # /connection/
    # /connection/gettestid/
    # /connection/finished/6330d6a09e56387e4dd59502418fa642/results
    location ~ ^/(connection(/?|/gettestid/?|/finished/.+)|change_language/?)$ {
        # forward information about the connecting client to the connection test
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # pass host for Django's allowed_hosts
        proxy_set_header Host $host;

        # set proxy_pass argument for 'app' container as variable, this way nginx doesn't fail when 'app' is unresolvable at startup
        set $app http://app:8080;
        proxy_pass $app;
    }

    # letsencrypt/ACME
    location /.well-known/acme-challenge/ {
        # basic auth should not apply to this path
        auth_basic off;
        # IP allowlist should also not apply
        allow all;
    }

    # redirect everything else to https and non conn. domain
    # used named capture `lang` and `ipv6` from `server_name` above as prefix
    location / {
        return 301 https://${lang}${ipv6}${INTERNETNL_DOMAINNAME}$request_uri;
    }
}
# http server for connection test XHR requests
server {
    listen       80;
    listen  [::]:80;

    server_name
      *.test-ns-signed.${INTERNETNL_DOMAINNAME}
      *.test-ns6-signed.${INTERNETNL_DOMAINNAME}
      [${IPV6_TEST_ADDR}];

    # pass specific connection test paths to backend
    # /
    # /connection/addr-test/6330d6a09e56387e4dd59502418fa642/
    location ~ ^(/|/connection/addr-test/.+/)$ {
        # forward information about the connecting client to the connection test
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # pass host for Django's allowed_hosts
        proxy_set_header Host $host;

        # set proxy_pass argument for 'app' container as variable, this way nginx doesn't fail when 'app' is unresolvable at startup
        set $app http://app:8080;
        proxy_pass $app;
    }
}

# No-www.org Class B compliance, see https://www.no-www.org/faq.php
server {
    listen       443 quic reuseport;
    listen       443 ssl;
    listen  [::]:443 quic reuseport;
    listen  [::]:443 ssl;

    server_name  www.${INTERNETNL_DOMAINNAME} ${REDIRECT_DOMAINS_LIST};

    include all.headers;

    # redirect to no-www domainname
    location / {
        return 301 https://${INTERNETNL_DOMAINNAME}$request_uri;
    }
}

# default https server
server {
    listen       443 quic;
    listen       443 ssl;
    listen  [::]:443 quic;
    listen  [::]:443 ssl;

    # LANGUAGES_REGEX is a list of language prefixes separated by pipes, eg: `nl\.|en\.`
    server_name ~^(?<lang>${LANGUAGES_REGEX})?(?<ipv6>ipv6\.)?${INTERNETNL_DOMAINNAME_REGEX}$ ${REDIRECT_DOMAINS_LIST};

    include all.headers;

    # by default proxy everything to the application
    location / {
        # pass host for Django's allowed_hosts
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;

        # enable cache
        proxy_cache            ${NGINX_PROXY_CACHE};
        # have at least some cache, togetherwith use_stale this will result in visitors not hitting the backend directly
        proxy_cache_valid      200  1m;
        # server old version of files when backend experiences errors or when fetching new content
        proxy_cache_use_stale  updating error timeout invalid_header http_500 http_502 http_503 http_504;
        # tell client browser to also cache these resources
        expires 1m;
        # make sure to cache separate for languages
        proxy_cache_key $scheme$host$uri$is_args$args$http_accept_language;

        proxy_set_header REMOTE-USER $remote_user;
        include /etc/nginx/conf.d/basic_auth.include;
        # set proxy_pass argument for 'app' container as variable, this way nginx doesn't fail when 'app' is unresolvable at startup
        set $app http://app:8080;
        proxy_pass $app;
    }

    # disable buffering on event stream for CSS development
    location /__reload__/events/ {
        # disable this location when not in development
        set $debug "${DEBUG}";
        if ($debug != "True"){
            return 404;
        }

        # same as / above, but only with things required in development
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        # set proxy_pass argument for 'app' container as variable, this way nginx doesn't fail when 'app' is unresolvable at startup
        set $app http://app:8080;
        proxy_pass $app;
        # disable buffering for streaming response
        proxy_buffering off;
    }

    # security.txt file
    location /.well-known/ {
        # basic auth should not apply to this path
        auth_basic off;
        # IP allowlist should also not apply
        allow all;
        alias /var/www/internet.nl/.well-known/;
    }
    # Allow result URLs to be shared and always open access to the API docs
    location ~ ^(/api/batch/openapi.yaml|/change_language/|/(site|mail)/[^/]+/[0-9]+/)$ {
        auth_basic off;
        allow all;
        # pass host for Django's allowed_hosts
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-Proto $scheme;
        # set proxy_pass argument for 'app' container as variable, this way nginx doesn't fail when 'app' is unresolvable at startup
        set $app http://app:8080;
        proxy_pass $app;
    }

    # disable security.txt if branding is disabled
    set $internetnl_branding "${INTERNETNL_BRANDING}";
    if ($internetnl_branding = "True"){
        set $security_txt "/var/www/internet.nl/.well-known/security.txt";
    }
    if ($internetnl_branding != "True"){
        set $security_txt "/var/www/internet.nl/.well-known/security-custom.txt";
    }
    location = /.well-known/security.txt {
        # basic auth should not apply to this path
        auth_basic off;
        # IP allowlist should also not apply
        alias $security_txt;
    }

    # static files served from Nginx container
    location = /robots.txt {
        alias /var/www/internet.nl/robots.txt;
    }
    location = /favicon.ico {
        alias /var/www/internet.nl/favicon.ico;
    }

    # static files served from app
    location /static {
        # these are unauthenticated as they are used for batch results as well
        auth_basic off;
        allow all;

        # enable cache
        proxy_cache            ${NGINX_PROXY_CACHE};
        # static files don't change often, cache for long
        proxy_cache_valid      200  1d;
        # server old version of files when backend experiences errors
        proxy_cache_use_stale  error timeout invalid_header updating http_500 http_502 http_503 http_504;
        # tell client browser to also cache these resources
        expires 1d;

        # pass host for Django's allowed_hosts
        proxy_set_header Host $host;
        # set proxy_pass argument for 'app' container as variable, this way nginx doesn't fail when 'app' is unresolvable at startup
        set $app http://app:8080;
        proxy_pass $app;
    }

    # redirect connection test to http subdomain to start test, needs 301 permanent
    # otherwise browsers might ignore the protocol change
    # only redirect connection test start, other connection test paths still need to
    # pass to the application
    # used named capture `lang` and `ipv6` from `server_name` above as prefix
    location = /connection/ {
        return 301 http://${lang}conn.${ipv6}${INTERNETNL_DOMAINNAME}/connection/;
    }

    # batch API, requires authentication and passes basic auth user to Django App via headers
    location /api/batch/v2 {
        auth_basic "Please enter your batch username and password";
        auth_basic_user_file /etc/nginx/htpasswd/external/users.htpasswd;

        # pass logged in user to Django
        proxy_set_header REMOTE-USER $remote_user;

        # pass host for Django's allowed_hosts
        proxy_set_header Host $host;

        # set proxy_pass argument for 'app' container as variable, this way nginx doesn't fail when 'app' is unresolvable at startup
        set $app http://app:8080;
        proxy_pass $app;
    }

    # monitoring, requires authentication, override headers, since CSP is too strict
    location /grafana {
        include http.headers;
        include hsts_h3.headers;
        auth_basic "Please enter your monitoring username and password";
        auth_basic_user_file /etc/nginx/htpasswd/monitoring.htpasswd;
        # set proxy_pass argument as variable, this makes sure nginx will still start even if this hostname is unresolvable due to monitoring profile being disabled
        set $grafana http://grafana:3000;
        proxy_pass $grafana;
    }
    location /prometheus {
        include http.headers;
        include hsts_h3.headers;
        auth_basic "Please enter your monitoring username and password";
        auth_basic_user_file /etc/nginx/htpasswd/monitoring.htpasswd;
        # set proxy_pass argument as variable, this makes sure nginx will still start even if this hostname is unresolvable due to monitoring profile being disabled
        set $prometheus http://prometheus:9090;
        proxy_pass $prometheus;
    }
    location /alertmanager {
        include http.headers;
        include hsts_h3.headers;
        auth_basic "Please enter your monitoring username and password";
        auth_basic_user_file /etc/nginx/htpasswd/monitoring.htpasswd;
        # set proxy_pass argument as variable, this makes sure nginx will still start even if this hostname is unresolvable due to monitoring profile being disabled
        set $alertmanager http://alertmanager:9093;
        proxy_pass $alertmanager;
    }

    # routinator proxy for internal use on multi instance setups
    location /routinator/ {
        include http.headers;
        include hsts_h3.headers;

        # allow only local connections
        allow 127.0.0.0/8;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        allow fd00::/8;
        deny all;

        # set proxy_pass argument as variable, this makes sure nginx will still start even if this hostname is unresolvable due to routinator profile being disabled
        set $routinator http://routinator:9556;
        rewrite ^/routinator(.*)$ $1 break;
        proxy_pass $routinator;
    }
}

# Temporary (1 year) exception for conn. subdomain to disable HSTS and redirect back to HTTP for
# clients that accessed the HTTPS version in the past and got a HSTS set of 1 year.
server {
    listen       443 quic;
    listen       443 ssl;
    listen  [::]:443 quic;
    listen  [::]:443 ssl;

    # LANGUAGES_REGEX is a list of language prefixes separated by pipes, eg: `nl\.|en\.`
    server_name ~^(?<lang>${LANGUAGES_REGEX})?conn\.(?<ipv6>ipv6\.)?${INTERNETNL_DOMAINNAME_REGEX}$;

    include http.headers;
    # Set max-age to 0 to effectivily disable HSTS on this subdomain to undo any HSTS settings done in the past.
    # This can be removed 1 year after initial release. See issue #894.
    add_header 'Strict-Transport-Security' 'max-age=0' always;

    # redirect to non-https version for connection test
    # used named capture `lang` and `ipv6` from `server_name` above as prefix
    location / {
        return 301 http://${lang}conn.${ipv6}${INTERNETNL_DOMAINNAME}$request_uri;
    }
}

# reject connection to any HTTPS vhost not explicitly served
server {
    listen       443 default_server quic;
    listen       443 default_server ssl;
    listen  [::]:443 default_server quic;
    listen  [::]:443 default_server ssl;

    server_name _;

    ssl_reject_handshake on;

    # only reachable if a correct SNI is send, but different unknown host (see test_default_sni_none).
    location / {
        return 404;
    }
}

# error a connection to any HTTP vhost not explicitly served
server {
    listen       80 default_server;
    listen  [::]:80 default_server;

    server_name _;

    location / {
        return 404;
    }
}
