#!/bin/bash
ENABLE_COVERAGE=${ENABLE_COVERAGE:-0}
TRUST_ANCHOR_PATH="/tmp/root_zsk.key"
ROOT_HINTS_PATH="${APP_PATH}/docker/it/dns/resolver/unbound/root.hints"
UNBOUND_CONF_PATH="/app/docker/it/app/unbound.conf.it"

# Output the environment variable set by the Dockerfile used to build our image
# so that we have some confirmation of which base Internet.nl base Docker image
# we were built against.
echo ":: Internet.nl code to be tested is taken from Docker image: ${INTERNETNL_BASE_IMAGE}"

echo
echo ":: Configuring Internet.nl app to use Unbound root hints file '${ROOT_HINTS_PATH}'.."
perl -pi -e 's|\{\{ROOT_IP\}\}|'${ROOT_IP}'|g' ${ROOT_HINTS_PATH}
perl -pi -e 's|\{\{ROOT_IPV6\}\}|'${ROOT_IPV6}'|g' ${ROOT_HINTS_PATH}

echo
echo ":: Configuring Internet.nl app to use Unbound config file '${UNBOUND_CONF_PATH}'.."
echo "   and forward resolver at ${RESOLVER_IP}.."
cat >>${APP_PATH}/internetnl/settings.py-dist <<EOF
ENABLE_INTEGRATION_TEST = True
IT_UNBOUND_CONFIG_PATH = '${UNBOUND_CONF_PATH}'
IT_UNBOUND_FORWARD_IP = '${RESOLVER_IP}'
EOF

echo
echo ":: Configuring Internet.nl app to use custom root CA cert and fingerprint.."
# The cert bundle influences the behaviour of nassl SSL clients:
#   tls.py::ConnectionHelper::connect() passes ssl_verify_locations with value
#   settings.CA_CERTIFICATES to the (Legacy)SslClient init method which
#   ultimately resuluts in SSL_CTX_load_verify_locations being given the
#   root CA cert bundle that is pointed to by settings.CA_CERTIFICATES,
#   where at the time of writing CA_CERTIFICATES points to our own file here:
#     remote_data/certs/ca-bundle.crt
#
# The root fingerprints influence any checks that invoke:
#   tls.py::save_results()::is_root_cert()
#
# The method of generating the root fingerprint is based on Bash script:
#   remote_data/certs/update-certs.sh
#
# This all helps to ensure we can score positively on the
# Trust Chain of certificate" Internet.nl test.
CUSTOM_ROOT_CA_CERT=${APP_PATH}/docker/it/targetbase/ca-ocsp/ca/rootCA.crt
APP_CERT_BUNDLE=${APP_PATH}/remote_data/certs/ca-bundle.crt
APP_ROOT_FINGERPRINTS=${APP_PATH}/remote_data/certs/root_fingerprints
cat ${CUSTOM_ROOT_CA_CERT} >>${APP_CERT_BUNDLE}
openssl x509 -noout -fingerprint -sha1 -inform pem -in ${CUSTOM_ROOT_CA_CERT} \
    | cut -d "=" -f 2 \
    | sed 's/://g' \
    >>${APP_ROOT_FINGERPRINTS}

# Don't start the Internet.NL app yet as we have to first acquire the ZSK used to
# sign our custom root zone. The testrunner container will start the Internet.nl
# app once the DNS chain is correctly set up and the root trust anchor has been
# acquired.

echo
echo ":: Waiting for root trust anchor file to appear.."
while ! test -f ${TRUST_ANCHOR_PATH}; do
  sleep 5s
done

echo "Received"
sudo chown internetnl: ${TRUST_ANCHOR_PATH}

echo
echo ":: Launching Internet.nl app.."
if [ ${ENABLE_COVERAGE} -eq 1 ]; then
    echo "Activating code coverage mode"
    export COVERAGE_PROCESS_START=/app/.coveragerc
    export RUN_SERVER_CMD="runserver --noreload --nothreading"
fi

${APP_PATH}/docker/entrypoint.sh &

# Don't exit, that might cause docker-compose up to terminate prematurely
# (before coverage data has been processed).
sleep infinity
