services:
  # terminate tls so we don't need to have exceptions in the nginx config file for development
  port-expose:
    image: nginx:1.27.3-alpine
    networks:
      - public-internet
      - internal

    restart: unless-stopped

    ports:
      - 8080:8080

    volumes:
      - ./port-expose/nginx_templates/:/etc/nginx/templates/

    environment:
      - INTERNETNL_DOMAINNAME

  app:
    build:
      target: app-dev
    # use Django runserver for better debug abilities during development
    entrypoint: ["/bin/bash"]
    # run CSS auto rebuild in the background and start devserver
    command:
      - "-c"
      - >
        if [ "$INTERNETNL_AUTORELOAD" = "True" ]; then
          # install npm dependencies and watch CSS and JS files for rebuild
          cd /app/frontend;
          # It's needed to install the rollup linux dependency
          npm install;
          npm run docker:watch &
          cd /app;
          # start development server with auto reloading
          ./manage.py runserver 0.0.0.0:8080
        else
          ./manage.py runserver 0.0.0.0:8080 --noreload
        fi;
    environment:
      - INTERNETNL_AUTORELOAD
    volumes:
      - batch_results:/app/batch_results
      # mount sources using volumes for quicker dev cycles
      - ../checks:/app/checks
      - ../interface:/app/interface
      - ../internetnl:/app/internetnl
      # mount frontend files so build tools can detect changes and rebuild
      - ../frontend/src:/app/frontend/src

  worker:
    volumes:
      - batch_results:/app/batch_results
      # mount sources using volumes for quicker dev cycles
      - ../checks:/app/checks
      - ../interface:/app/interface
      - ../internetnl:/app/internetnl

  beat:
    volumes:
      # mount sources using volumes for quicker dev cycles
      - ../checks:/app/checks
      - ../interface:/app/interface
      - ../internetnl:/app/internetnl
