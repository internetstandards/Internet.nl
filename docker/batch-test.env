# This file contains settings for the batch test environment. This is basically the same
# as test.env except it enables batch API.
# Please _DO NOT_ modify this file to change the runtime settings of your instance. Instead
# use one of the files that is layered on top of this, eg: `local.env`.

# use internal domain name
INTERNETNL_DOMAINNAME=internet.test
# use unique name to not conflict with integration tests
COMPOSE_PROJECT_NAME=internetnl-batch-test

ENABLE_BATCH=True

BATCH_SCHEDULER_INTERVAL=1

# enable manual hof entryB
HOSTERS_HOF_URL=http://static/static/hosters.yaml
MANUAL_HOF_PAGES=hosters

# use internal IPv6 subnet and IP's
IPV6_SUBNET_PUBLIC=fd00:43:1::/48
IPV6_GATEWAY_PUBLIC=fd00:43:1::1
IPV6_IP_PUBLIC=fd00:43:1::100
# use internal IPv4 subnet and IP's
IPV4_SUBNET_PUBLIC=172.16.43.0/24
IPV4_IP_PUBLIC=172.16.43.100
IPV4_WEBSERVER_IP_PUBLIC=172.16.43.100
IPV4_UNBOUND_IP_PUBLIC=172.16.43.101
IPV6_UNBOUND_IP_PUBLIC=fd00:43:1::101

# use fixed IPv4 addresses for internal networking to prevent resolving cache issues when recreating containers
IPV4_SUBNET_INTERNAL=192.168.43.0/24

IPV4_IP_MOCK_RESOLVER_PUBLIC=172.16.43.114
IPV6_IP_MOCK_RESOLVER_PUBLIC=fd00:43:1::114

IPV4_IP_TEST_TARGET_PUBLIC=172.16.43.51
IPV4_IP_TEST_TARGET_MAIL_PUBLIC=172.16.43.52
IPV6_IP_TEST_TARGET_PUBLIC=fd00:43:1::51
IPV6_IP_TEST_TARGET_MAIL_PUBLIC=fd00:43:1::52

# use easy test/test user/passwords for authenticated endpoints
MONITORING_AUTH_RAW='test:$apr1$PfpYZVWM$tLUKMXt91KJV6I.CF3TOt1,test_raw:$apr1$6YuDyduL$706z.FPTe5c09R767N3W90'

LETSENCRYPT_STAGING=1
LETSENCRYPT_EMAIL=letsencrypt@example.com

REDIRECT_DOMAINS=platforminternet.test

# on test run without debug mode, same as production
DEBUG=False
# do enable extra logging
DEBUG_LOG=True
INTERNETNL_LOG_LEVEL=DEBUG

INTERNETNL_CACHE_RESET_ALLOWLIST=target.test

# allow localhost for healthchecks, the public domain for the app and it's subdomains for connection tests
ALLOWED_HOSTS=127.0.0.1,::1,localhost,.internet.test,internet.test

IPV6_TEST_ADDR=fd00:43:1::100
CONN_TEST_DOMAIN=internet.test
SMTP_EHLO_DOMAIN=internet.test

# for test/dev environments we want to aggressively check to have a as fast as possible startup
HEALTHCHECK_START_INTERVAL=1s

# include default components, integration test targets, internal resolver and test-runner
COMPOSE_FILE=docker/compose.yaml:docker/compose.integration-tests.yaml

# export rabbitmq gui on alternative port to not conflict with development environment
RABBITMQ_GUI=127.0.0.1:15672:15673

# use an interally hosted public suffix list due to isolated network
PUBLIC_SUFFIX_LIST_URL=http://static/static/public_suffix_list.dat

# make internal unbound forward requests to the internal resolver
INTEGRATION_TESTS=True

# don't expose HTTP(S) and DNS ports to the outside, this also causes issues due to being privileged ports
WEBSERVER_PORT=80
WEBSERVER_PORT_TLS=443
WEBSERVER_PORT_IPV6=8080
WEBSERVER_PORT_IPV6_TLS=4443
UNBOUND_PORT_TCP=53/tcp
UNBOUND_PORT_UDP=53/udp
# use fake port numbers here so we don't end up with duplicates in the compose file which causes an error
UNBOUND_PORT_IPV6_TCP=5353/tcp
UNBOUND_PORT_IPV6_UDP=5353/udp

# TODO: disabled routinator during testing as it has a lengthy startup fetching data and the API behaves
# unreliable when data cannot be fetched. This needs to be properly mocked or provided with stub data for tests.
ROUTINATOR_URL=

# use default logging driver instead of journald
LOGGING_DRIVER=json-file

# enable backup crons so they can be tested
CRON_DAILY_POSTGRESQL_BACKUP=True
CRON_WEEKLY_POSTGRESQL_BACKUP=True

# selftest runs against public domain (example.(nl|com)) which will never work in the test environment
CRON_15MIN_RUN_TESTS=False

INTERNETNL_BRANDING=True
